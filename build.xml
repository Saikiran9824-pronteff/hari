<project name="apic-cicd-pipeline" default="publish" basedir=".">

    <!-- =================== ant-contrib foreach =================== -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- =================== Properties =================== -->
    <property name="SERVER" value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
    <property name="ORG" value="indusapi-np"/>
    <property name="CATALOG" value="${env}"/>

    <!-- =================== Login =================== -->
    <target name="login">
        <echo message="🔑 Logging in to APIC server..."/>
        <exec executable="apic">
            <arg value="login"/>
            <arg value="--server"/>
            <arg value="${SERVER}"/>
            <arg value="--username"/>
            <arg value="${APIC_USER}"/>
            <arg value="--password"/>
            <arg value="${APIC_PASSWORD}"/>
            <arg value="--realm"/>
            <arg value="provider/default-idp-2"/>
        </exec>
    </target>

    <!-- =================== Validate =================== -->
    <target name="validate">
        <echo message="✅ Validating API YAMLs..."/>
        <foreach target="validate-api" param="api.file">
            <path>
                <fileset dir="apis" includes="*.yaml"/>
            </path>
        </foreach>
    </target>

    <target name="validate-api">
        <echo message="📄 Validating ${api.file}"/>
        <exec executable="apic">
            <arg value="validate"/>
            <arg value="${api.file}"/>
        </exec>
    </target>

    <!-- =================== API Loop =================== -->
    <target name="apis-process" depends="login,validate">
        <echo message="📦 Processing APIs from apis/*.yaml"/>
        <foreach target="api-create-or-update" param="api.file">
            <path>
                <fileset dir="apis" includes="*.yaml"/>
            </path>
        </foreach>
    </target>

    <target name="api-create-or-update">
        <basename property="api.filename" file="${api.file}" suffix=".yaml"/>
        <script language="javascript">
            var parts = project.getProperty("api.filename").split("_");
            project.setProperty("API_NAME", parts[0]);
            project.setProperty("API_VERSION", parts[1]);
        </script>
        <echo message="🔎 Checking API ${API_NAME}:${API_VERSION}"/>

        <exec executable="apic" failonerror="false" outputproperty="api.exists">
            <arg value="draft-apis:get"/>
            <arg value="${API_NAME}:${API_VERSION}"/>
            <arg value="--server"/>
            <arg value="${SERVER}"/>
            <arg value="--org"/>
            <arg value="${ORG}"/>
        </exec>

        <condition property="api.exists.true">
            <matches string="${api.exists}" pattern=".*\Q${API_NAME}:${API_VERSION}\E.*"/>
        </condition>

        <antcall target="api-update"/>
        <antcall target="api-create"/>
    </target>

    <target name="api-create" unless="api.exists.true">
        <echo message="🆕 Creating API ${API_NAME}:${API_VERSION}"/>
        <exec executable="apic">
            <arg value="draft-apis:create"/>
            <arg value="apis/${API_NAME}_${API_VERSION}.yaml"/>
            <arg value="--server"/>
            <arg value="${SERVER}"/>
            <arg value="--org"/>
            <arg value="${ORG}"/>
        </exec>
    </target>

    <target name="api-update" if="api.exists.true">
        <echo message="♻️ Updating API ${API_NAME}:${API_VERSION}"/>
        <exec executable="apic">
            <arg value="draft-apis:update"/>
            <arg value="apis/${API_NAME}_${API_VERSION}.yaml"/>
            <arg value="--server"/>
            <arg value="${SERVER}"/>
            <arg value="--org"/>
            <arg value="${ORG}"/>
        </exec>
    </target>

    <!-- =================== Fix Refs =================== -->
    <target name="fix-refs" depends="apis-process">
        <echo message="🔧 Fixing product refs..."/>
        <foreach target="fix-product" param="product.file">
            <path>
                <fileset dir="products" includes="*.yaml"/>
            </path>
        </foreach>
    </target>

    <target name="fix-product">
        <echo message="🔧 Fixing ${product.file}"/>
        <exec executable="apic">
            <arg value="products:replace-refs"/>
            <arg value="${product.file}"/>
            <arg value="--server"/>
            <arg value="${SERVER}"/>
        </exec>
    </target>

    <!-- =================== Publish Products =================== -->
    <target name="publish" depends="fix-refs">
        <echo message="🚀 Publishing Products..."/>
        <foreach target="publish-product" param="product.file">
            <path>
                <fileset dir="products" includes="*.yaml"/>
            </path>
        </foreach>
    </target>

    <target name="publish-product">
        <basename property="product.filename" file="${product.file}" suffix=".yaml"/>
        <echo message="📢 Publishing ${product.filename}"/>
        <exec executable="apic">
            <arg value="products:publish"/>
            <arg value="${product.file}"/>
            <arg value="--catalog"/>
            <arg value="${CATALOG}"/>
            <arg value="--server"/>
            <arg value="${SERVER}"/>
            <arg value="--org"/>
            <arg value="${ORG}"/>
        </exec>
    </target>

    <!-- =================== Backup =================== -->
    <target name="backup" depends="publish">
        <tstamp>
            <format property="NOW" pattern="dd-MM-yyyy"/>
        </tstamp>
        <mkdir dir="backup/${NOW}"/>
        <copy todir="backup/${NOW}">
            <fileset dir="products" includes="*.yaml"/>
            <fileset dir="apis" includes="*.yaml"/>
        </copy>
        <echo message="💾 Backup completed at backup/${NOW}"/>
    </target>

</project>
