<?xml version="1.0" encoding="UTF-8"?>
<project name="apic-cicd-bulk" default="ci" basedir=".">

    <!-- ============ Configurable properties (can be overridden via -D in Jenkins) ============ -->
    <property name="ANT_CONTRIB_JAR" value="ant-contrib-1.0b3.jar"/>
    <property name="APIS_DIR"        value="apis"/>
    <property name="PRODUCTS_DIR"    value="products"/>
    <property name="SERVER"          value="https://small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
    <property name="ORG"             value="indusapi-np"/>
    <property name="CATALOG"         value="prod"/>

    <!-- optional properties -->
    <property name="API_NAME"        value=""/>
    <property name="API_VERSION"     value=""/>
    <property name="PRODUCT_NAME"    value=""/>
    <property name="PRODUCT_VERSION" value=""/>

    <!-- ================= ant-contrib: foreach, propertyregex, etc. ================= -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${ANT_CONTRIB_JAR}"/>
        </classpath>
    </taskdef>

    <!-- ================= Login (single time) ================= -->
    <target name="login">
        <echo message="🔐 Logging in to API Connect (server=${SERVER}) ..."/>
        <echo message="Using APIC_USERNAME=${APIC_USERNAME}"/>
        <exec executable="apic" failonerror="true">
            <arg value="login"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--username=umesh"/>
            <arg value="--password=!n0r1t5@C"/>
            <arg value="--realm=provider/default-idp-2"/>
        </exec>
    </target>

    <!-- ================= Bulk APIs ================= -->
    <target name="bulk-apis" depends="login">
        <echo message="📦 Starting bulk API processing from: ${APIS_DIR}"/>
        <foreach param="apiFile" target="process-api">
            <path>
                <fileset dir="${APIS_DIR}" includes="*.yaml"/>
            </path>
        </foreach>
    </target>

    <target name="process-api">
        <!-- Get filename without extension -->
        <basename property="apiBase" file="${apiFile}" suffix=".yaml"/>

        <!-- Split name and version -->
        <pathconvert property="API_NAME">
            <mapper type="regexp" from="^([^_]+)_(.*)$" to="\1"/>
            <path>
                <pathelement location="${apiBase}"/>
            </path>
        </pathconvert>

        <pathconvert property="API_VERSION">
            <mapper type="regexp" from="^([^_]+)_(.*)$" to="\2"/>
            <path>
                <pathelement location="${apiBase}"/>
            </path>
        </pathconvert>

        <echo message="➡️ Processing API file: ${apiFile} -> ${API_NAME}_${API_VERSION}"/>

        <!-- 1) Validate -->
        <exec executable="apic" failonerror="true">
            <arg value="validate"/>
            <arg value="${apiFile}"/>
        </exec>

        <!-- 2) Check existence -->
        <exec executable="apic" resultproperty="api.check.rc" failonerror="false">
            <arg value="draft-apis:get"/>
            <arg value="${API_NAME}:${API_VERSION}"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--org=${ORG}"/>
        </exec>

        <!-- 3) Set flag -->
        <condition property="api.exists">
            <equals arg1="${api.check.rc}" arg2="0"/>
        </condition>

        <echo message="    api.check.rc=${api.check.rc}  api.exists=${api.exists}"/>

        <!-- Call conditional handler -->
        <antcall target="api-exists-handler-true" inheritAll="true" if="api.exists"/>
        <antcall target="api-exists-handler-false" inheritAll="true" unless="api.exists"/>

        <!-- 4) Optional: run product-ref update helper -->
        <exec executable="sh" failonerror="false">
            <arg value="scripts/fix-product-refs.sh"/>
            <arg value="${basedir}/${PRODUCTS_DIR}"/>
            <arg value="${basedir}/${APIS_DIR}"/>
        </exec>
    </target>

    <target name="api-exists-handler-true">
        <antcall target="api-update"/>
    </target>

    <target name="api-exists-handler-false">
        <antcall target="api-create"/>
    </target>

    <target name="api-create">
        <echo message="🆕 Creating draft API ${API_NAME}:${API_VERSION}"/>
        <exec executable="apic" failonerror="true">
            <arg value="draft-apis:create"/>
            <arg value="${APIS_DIR}/${API_NAME}_${API_VERSION}.yaml"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--org=${ORG}"/>
        </exec>
    </target>

    <target name="api-update">
        <echo message="♻️ Updating draft API ${API_NAME}:${API_VERSION}"/>
        <exec executable="apic" failonerror="true">
            <arg value="draft-apis:update"/>
            <arg value="${API_NAME}:${API_VERSION}"/>
            <arg value="${APIS_DIR}/${API_NAME}_${API_VERSION}.yaml"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--org=${ORG}"/>
        </exec>
    </target>

    <!-- ================= Bulk Products ================= -->
    <target name="bulk-products" depends="bulk-apis">
        <echo message="📦 Starting bulk Product processing from: ${PRODUCTS_DIR}"/>
        <foreach param="productFile" target="process-product">
            <path>
                <fileset dir="${PRODUCTS_DIR}" includes="*.yaml"/>
            </path>
        </foreach>
    </target>

    <target name="process-product">
        <basename property="productBase" file="${productFile}" suffix=".yaml"/>

        <propertyregex property="PRODUCT_NAME"
                       input="${productBase}"
                       regexp="^([^_]+)_(.*)$"
                       select="\1"/>

        <propertyregex property="PRODUCT_VERSION"
                       input="${productBase}"
                       regexp="^([^_]+)_(.*)$"
                       select="\2"/>

        <echo message="➡️ Processing Product file: ${productFile} -> ${PRODUCT_NAME}_${PRODUCT_VERSION}"/>

        <!-- check product existence -->
        <exec executable="apic" resultproperty="product.check.rc" failonerror="false">
            <arg value="draft-products:get"/>
            <arg value="${PRODUCT_NAME}:${PRODUCT_VERSION}"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--org=${ORG}"/>
        </exec>

        <condition property="product.exists">
            <equals arg1="${product.check.rc}" arg2="0"/>
        </condition>

        <echo message="    product.check.rc=${product.check.rc}  product.exists=${product.exists}"/>

        <antcall target="product-update" if="product.exists"/>
        <antcall target="product-create" unless="product.exists"/>

        <!-- publish the product -->
        <exec executable="apic" failonerror="true">
            <arg value="products:publish"/>
            <arg value="${PRODUCTS_DIR}/${PRODUCT_NAME}_${PRODUCT_VERSION}.yaml"/>
            <arg value="--catalog=${CATALOG}"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--org=${ORG}"/>
        </exec>
    </target>

    <target name="product-create">
        <echo message="🆕 Creating draft Product ${PRODUCT_NAME}:${PRODUCT_VERSION}"/>
        <exec executable="apic" failonerror="true">
            <arg value="draft-products:create"/>
            <arg value="${PRODUCTS_DIR}/${PRODUCT_NAME}_${PRODUCT_VERSION}.yaml"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--org=${ORG}"/>
        </exec>
    </target>

    <target name="product-update">
        <echo message="♻️ Updating draft Product ${PRODUCT_NAME}:${PRODUCT_VERSION}"/>
        <exec executable="apic" failonerror="true">
            <arg value="draft-products:update"/>
            <arg value="${PRODUCT_NAME}:${PRODUCT_VERSION}"/>
            <arg value="${PRODUCTS_DIR}/${PRODUCT_NAME}_${PRODUCT_VERSION}.yaml"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--org=${ORG}"/>
        </exec>
    </target>

    <!-- ================= CI entrypoint ================ -->
    <target name="ci" depends="bulk-products">
        <echo message="🎉 CI pipeline finished."/>
    </target>

</project>
