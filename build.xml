<project name="apic-cicd-pipeline" default="ci" basedir=".">

    <!-- =================== ant-contrib foreach =================== -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- ============= Properties ============= -->
    <property name="APIS_DIR" value="apis"/>
    <property name="PRODUCTS_DIR" value="products"/>
    <property name="SERVER" value="small-1-mgmt-api-manager-cp4i.apps.ocp.prontefflabs.com"/>
    <property name="ORG" value="indusapi-np"/>
    <property name="CATALOG" value="prod"/>

    <!-- ============= Login ============= -->
    <target name="login">
        <echo message="🔐 Logging in to API Connect..."/>
        <exec executable="apic" failonerror="true">
            <arg value="login"/>
            <arg value="--server=${SERVER}"/>
            <arg value="--username=umesh"/>
            <arg value="--password=!n0r1t5@C"/>
            <arg value="--realm=provider/default-idp-2"/>
        </exec>
    </target>

    <!-- ============= Process all APIs ============= -->
    <target name="bulk-apis" depends="login">
        <echo message="📦 Processing all APIs in ${APIS_DIR}/ folder..."/>
        <foreach target="process-api" param="apiFile">
            <path>
                <fileset dir="${APIS_DIR}" includes="*.yaml"/>
            </path>
        </foreach>
    </target>

    <!-- ============= Single API handling ============= -->
    <target name="process-api">
        <basename property="apiFileName" file="${apiFile}"/>
        <!-- Split into API_NAME and API_VERSION -->
        <script language="javascript">
            var file = project.getProperty("apiFileName"); // e.g. hello_1.0.0.yaml
            var base = file.replace(".yaml", "");
            var parts = base.split("_");
            project.setProperty("API_NAME", parts[0]);
            project.setProperty("API_VERSION", parts[1]);
        </script>

        <echo message="➡️ Handling API: ${API_NAME}_${API_VERSION}"/>

        <!-- Step 1: Validate -->
        <exec executable="apic" failonerror="true">
            <arg value="validate"/>
            <arg value="${apiFile}"/>
        </exec>

        <!-- Step 2: Check if API exists -->
        <exec executable="apic" resultproperty="apiCheckResult" failonerror="false">
            <arg value="draft-apis:get"/>
            <arg value="${API_NAME}:${API_VERSION}"/>
            <arg value="--org=${ORG}"/>
            <arg value="--server=${SERVER}"/>
        </exec>

        <!-- Step 3: Create/Update -->
        <condition property="api.exists">
            <equals arg1="${apiCheckResult}" arg2="0"/>
        </condition>

        <antcall target="api-update" unless="api.exists"/>
        <antcall target="api-create" if="api.exists"/>

        <!-- Step 4: Run script to update ref path -->
        <exec executable="sh" failonerror="false">
            <arg value="scripts/update-ref-path.sh"/>
            <arg value="${apiFile}"/>
        </exec>
    </target>

    <!-- ============= API Create/Update ============= -->
    <target name="api-create">
        <echo message="🆕 Creating API ${API_NAME}:${API_VERSION}"/>
        <exec executable="apic" failonerror="true">
            <arg value="draft-apis:create"/>
            <arg value="${apiFile}"/>
            <arg value="--org=${ORG}"/>
            <arg value="--server=${SERVER}"/>
        </exec>
    </target>

    <target name="api-update">
        <echo message="♻️ Updating API ${API_NAME}:${API_VERSION}"/>
        <exec executable="apic" failonerror="true">
            <arg value="draft-apis:update"/>
            <arg value="${apiFile}"/>
            <arg value="--org=${ORG}"/>
            <arg value="--server=${SERVER}"/>
        </exec>
    </target>

    <!-- ============= Process all Products ============= -->
    <target name="bulk-products" depends="bulk-apis">
        <echo message="📦 Processing all Products in ${PRODUCTS_DIR}/ folder..."/>
        <foreach target="process-product" param="productFile">
            <path>
                <fileset dir="${PRODUCTS_DIR}" includes="*.yaml"/>
            </path>
        </foreach>
    </target>

    <!-- ============= Single Product handling ============= -->
    <target name="process-product">
        <basename property="productFileName" file="${productFile}"/>
        <echo message="➡️ Handling Product: ${productFileName}"/>

        <!-- Check if Product exists -->
        <exec executable="apic" resultproperty="productCheckResult" failonerror="false">
            <arg value="products:get"/>
            <arg value="${productFile}"/>
            <arg value="--org=${ORG}"/>
            <arg value="--server=${SERVER}"/>
        </exec>

        <condition property="product.exists">
            <equals arg1="${productCheckResult}" arg2="0"/>
        </condition>

        <antcall target="product-update" unless="product.exists"/>
        <antcall target="product-create" if="product.exists"/>

        <!-- Publish Product -->
        <antcall target="product-publish"/>
    </target>

    <!-- ============= Product Create/Update/Publish ============= -->
    <target name="product-create">
        <echo message="🆕 Creating Product ${productFileName}"/>
        <exec executable="apic" failonerror="true">
            <arg value="products:create"/>
            <arg value="${productFile}"/>
            <arg value="--org=${ORG}"/>
            <arg value="--server=${SERVER}"/>
        </exec>
    </target>

    <target name="product-update">
        <echo message="♻️ Updating Product ${productFileName}"/>
        <exec executable="apic" failonerror="true">
            <arg value="products:update"/>
            <arg value="${productFile}"/>
            <arg value="--org=${ORG}"/>
            <arg value="--server=${SERVER}"/>
        </exec>
    </target>

    <target name="product-publish">
        <echo message="🚀 Publishing Product ${productFileName} to Catalog: ${CATALOG}"/>
        <exec executable="apic" failonerror="true">
            <arg value="products:publish"/>
            <arg value="${productFile}"/>
            <arg value="--org=${ORG}"/>
            <arg value="--catalog=${CATALOG}"/>
            <arg value="--server=${SERVER}"/>
        </exec>
    </target>

    <!-- ============= CI ============= -->
    <target name="ci" depends="bulk-products">
        <echo message="✅ CI/CD process completed successfully!"/>
    </target>

</project>
